const { Server } = require("socket.io");

const io = new Server(4000, {
  cors: {
    origin: "*",
  },
});

const rooms = {}; // roomId -> { players: Set, questions: [], current: 0 }


io.on("connection", (socket) => {
  console.log("‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:", socket.id);

  socket.on("join", (roomId, callback) => {
    if (!rooms[roomId]) {
      rooms[roomId] = new Set();
    }

    if (rooms[roomId].size >= 2) {
      callback({ success: false, message: "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      return;
    }

    rooms[roomId].add(socket.id);
    socket.join(roomId);

    callback({ success: true, message: "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" });

    // –û—Ç–ø—Ä–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –í–°–ï–ú –≤ –∫–æ–º–Ω–∞—Ç–µ
    const players = Array.from(rooms[roomId]);
    console.log(`üîÑ –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, players);
    io.to(roomId).emit("player-joined", players);
  });

  socket.on("answer", (data) => {
    const { roomId, answer } = data;
    io.to(roomId).emit("answer", { playerId: socket.id, answer });
  });

  socket.on("disconnect", () => {
    for (const roomId in rooms) {
      if (rooms[roomId].has(socket.id)) {
        rooms[roomId].delete(socket.id);
        console.log(`‚ùå ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);

        if (rooms[roomId].size === 0) {
          delete rooms[roomId];
        } else {
          const players = Array.from(rooms[roomId]);
          io.to(roomId).emit("player-joined", players);
        }

        break;
      }
    }
  });
});

console.log("üöÄ Socket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000");
