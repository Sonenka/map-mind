const { Server } = require("socket.io");
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const io = new Server(4000, {
  cors: {
    origin: "*",
  },
});

const rooms = {}; // roomId -> { players: Set, questions: [], currentQuestionIndex: 0 }

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
async function checkAnswer(questionId, answer) {
  try {
    const question = await prisma.question.findUnique({
      where: { id: questionId },
      select: { correct: true }
    });
    return question?.correct === answer;
  } catch (error) {
    console.error("Error checking answer:", error);
    return false;
  }
}

io.on("connection", (socket) => {
  console.log("‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:", socket.id);

  socket.on("join", async (roomId, callback) => {
    if (!rooms[roomId]) {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const questions = await prisma.question.findMany({
          where: {  }, // –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
          take: 10,
          select: {
            id: true,
            question: true,
            options: true,
            correct: true
          }
        });

        rooms[roomId] = {
          players: new Set(),
          questions: questions,
          currentQuestionIndex: 0
        };
      } catch (err) {
        console.error("Error loading questions:", err);
        callback({ success: false, message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤" });
        return;
      }
    }

    if (rooms[roomId].players.size >= 2) {
      callback({ success: false, message: "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      return;
    }

    rooms[roomId].players.add(socket.id);
    socket.join(roomId);

    callback({ 
      success: true, 
      message: "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
      currentQuestion: rooms[roomId].questions[rooms[roomId].currentQuestionIndex]
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    const players = Array.from(rooms[roomId].players);
    io.to(roomId).emit("player-joined", players);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    io.to(roomId).emit("new-question", 
      rooms[roomId].questions[rooms[roomId].currentQuestionIndex]
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
  socket.on("answer", async (data) => {
    try {
      const { roomId, answer, questionId } = data;
      const room = rooms[roomId];
      
      if (!room) {
        console.log("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
      const isCorrect = await checkAnswer(questionId, answer);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit("answer", { 
        playerId: socket.id, 
        answer,
        isCorrect,
        questionId
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
      moveToNextQuestion(roomId);
    } catch (error) {
      console.error("Error handling answer:", error);
    }
  });

  socket.on("disconnect", () => {
    for (const roomId in rooms) {
      if (rooms[roomId].players.has(socket.id)) {
        rooms[roomId].players.delete(socket.id);
        console.log(`‚ùå ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);

        if (rooms[roomId].players.size === 0) {
          delete rooms[roomId];
        } else {
          const players = Array.from(rooms[roomId].players);
          io.to(roomId).emit("player-joined", players);
        }
        break;
      }
    }
  });
});


// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
function moveToNextQuestion(roomId) {
  const room = rooms[roomId];
  if (!room) return;

  room.currentQuestionIndex++;
  
  if (room.currentQuestionIndex < room.questions.length) {
    io.to(roomId).emit("new-question", room.questions[room.currentQuestionIndex]);
  } else {
    io.to(roomId).emit("game-over");
  }
}

console.log("üöÄ Socket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000");