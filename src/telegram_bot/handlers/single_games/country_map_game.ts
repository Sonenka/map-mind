import { Markup } from 'telegraf';
import axios from 'axios';
import { incrementCountryMapIdx, shuffleArray } from '../../utils/useful_functions.ts';

export function setupCountryMapGame(bot) {
    bot.action('COUNTRY_MAP_GAME', async (ctx) => {
        console.log(`${ctx.from?.username || ctx.from?.first_name || '–ê–Ω–æ–Ω–∏–º'} | COUNTRY_MAP_GAME received`);

        ctx.answerCbQuery();
        await ctx.deleteMessage();

        try {
            if (!ctx.session) ctx.session = {};
            if (!ctx.session.countryMapQuestions) {
                const res = await axios.get(`http://localhost:3000/api/questions/map`);
                ctx.session.countryMapQuestions = shuffleArray(res.data);
                ctx.session.countryMapIdx = 0;
                ctx.session.correctAnswers = 0;
            }

            const text = '–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–≥–∞–¥—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–∞—Ä—Ç–µ.\n\
–í –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ –ø–æ —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–µ—Ä–Ω—ã–π. –£–¥–∞—á–∏!';
            ctx.reply(text, Markup.inlineKeyboard([
                [Markup.button.callback('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', `NEXT_COUNTRY_MAP_QUESTION|${0}|${0}`)],
                [Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', 'BACK_TO_MENU')],
            ]));
        } catch (err) {
            console.error(err);
            ctx.reply('–û—à–∏–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã.', Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', 'BACK_TO_MENU')],
            ]));
        }
    });

    bot.action(/NEXT_COUNTRY_MAP_QUESTION\|(\d+)\|(0|1)/, async (ctx) => {
        ctx.answerCbQuery();
        await ctx.editMessageReplyMarkup();

        const match = ctx.match;
        const questionNumer = parseInt(match[1]);
        const correct = parseInt(match[2]);

        var text = '';

        if (questionNumer > 0) {
            if (correct == 1) {
                ctx.session.correctAnswers++;
                console.log(`${ctx.from?.username || ctx.from?.first_name || '–ê–Ω–æ–Ω–∏–º'} | ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!`, ctx.session.correctAnswers, questionNumer);
                text += '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n';
            } else {
                console.log(`${ctx.from?.username || ctx.from?.first_name || '–ê–Ω–æ–Ω–∏–º'} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!`, ctx.session.correctAnswers, questionNumer);
                text += '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n';
            }
        }

        if (questionNumer + 1 <= 5) {
            const currentQuestion = ctx.session.countryMapQuestions[ctx.session.countryMapIdx];
            incrementCountryMapIdx(ctx);
            text += '–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ?';

            const optionButtons = currentQuestion.options.map((option, index) => {
                const isCorrect = option === currentQuestion.correct ? 1 : 0;
                return [Markup.button.callback(option, `NEXT_COUNTRY_MAP_QUESTION|${questionNumer + 1}|${isCorrect}`)]
            });

            const controlButtons = [
                [Markup.button.callback('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'BACK_TO_MENU')]
            ];
            const keyboard = [...optionButtons, ...controlButtons];

            await ctx.replyWithPhoto(currentQuestion.question, { caption: '' });
            await ctx.reply(text, Markup.inlineKeyboard(keyboard));
        } else {
            if (ctx.session.user) {
                const response = await axios.post(
                    'http://localhost:3000/api/result',
                    {
                        score: ctx.session.correctAnswers,
                        currentUserId: ctx.session.user.id,
                        currentUserEmail: ctx.session.user.email,
                    },
                    {
                        headers: { "Content-Type": "application/json" }
                    }
                );
                console.log(`${ctx.from?.username || ctx.from?.first_name || '–ê–Ω–æ–Ω–∏–º'} | –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, response.data?.score || -1);
            }

            text += 'üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n';
            text += '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ' + ctx.session.correctAnswers + ' –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤!';
            ctx.session.correctAnswers = 0;
            ctx.reply(text, Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è –í –º–µ–Ω—é', 'BACK_TO_MENU')],
            ]));
        }
    });
}
